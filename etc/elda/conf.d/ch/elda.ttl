#
# Linked Data API Configuration
#

@prefix spec:    <http://localhost/api/> .

@prefix adms:     <http://www.w3.org/ns/adms#> .
@prefix api:      <http://purl.org/linked-data/api/vocab#> .
@prefix ch-terms: <http://business.data.gov.uk/company-profile/def/company-terms/> .
@prefix dc:       <http://purl.org/dc/elements/1.1/> .
@prefix dct:      <http://purl.org/dc/terms/> .
@prefix dcterms:  <http://purl.org/dc/terms/> .
@prefix elda:     <http://www.epimorphics.com/vocabularies/lda#> .
@prefix foaf:     <http://xmlns.com/foaf/0.1/> .
@prefix org:      <http://www.w3.org/ns/org#> .
@prefix owl:      <http://www.w3.org/2002/07/owl#> .
@prefix postcode: <http://data.ordnancesurvey.co.uk/ontology/postcode/> .
@prefix rdf:      <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:     <http://www.w3.org/2000/01/rdf-schema#> .
@prefix rov:      <http://www.w3.org/ns/regorg#> .
@prefix skos:     <http://www.w3.org/2004/02/skos/core#> .
@prefix sic:      <http://business.data.gov.uk/company-profile/def/sic-2007/> .
@prefix vcard:    <http://www.w3.org/2006/vcard/ns#> .
@prefix void:     <http://rdfs.org/ns/void#> .
@prefix xsd:      <http://www.w3.org/2001/XMLSchema#> .

#
# API DESCRIPTION
#

spec:api
	a api:API ;
    api:lang "en,none" ;
	rdfs:label "Linked Data API"@en ;
    rdfs:comment "Linked Data API"@en ;
    api:base   "/";
	api:variable   [ api:name "base" ; api:value "http://business.data.gov.uk" ];
    elda:enableCounting  "optional" ;
    elda:enableETags true;
    api:maxPageSize "200" ;
    api:defaultPageSize "10" ;
    api:formatter   spec:CsvFormatter, spec:VHtmlFormatter ;
    api:defaultFormatter spec:VHtmlFormatter
    .  

spec:api
    api:sparqlEndpoint <<%= @service_description.data_server_query_endpoint %>>
    .

#
# Elda required variable settings for html formatter operation.
#

spec:api
        api:variable    [ api:name "_resourceRoot"          ; api:value "/lda-assets/" ] ;
		api:variable    [ api:name "visibleSparqlForm"      ; api:value "/app/explorer/sparql.html" ] ;
        api:variable    [ api:name "visibleSparqlEndpoint"  ; api:value "/ch/query" ] ;
        api:variable    [ api:name  "_velocityPath"         ; api:value "file://var/www/ch/html/lda-assets/velocity"] ;    
        api:variable    [ api:name "_suppress_ipto"         ; api:value "yes" ];
        api:variable    [ api:name "_exceptionIfEmpty"      ; api:value "no" ];
        .
        
#
# API Global Variables
#

spec:api
        api:variable    [ api:name "_collection"          ; api:value "company-profile" ] ;
        api:variable    [ api:name "rewriteURLFrom"       ; api:value "http://business.data.gov.uk/" ] ;
        api:variable    [ api:name "rewriteURLTo"         ; api:value "/" ] ;
        .


#
# VIEWERS
#

spec:noneViewer
        a           api:Viewer  ;
        api:name    "none";
        .   
#         
# FORMATTERS
#

spec:VHtmlFormatter
    a elda:VelocityFormatter
    ; api:name "html"
    ; elda:className "com.epimorphics.lda.renderers.VelocityRendererFactory"
    ; api:mimeType "text/html"
    .
    
spec:CsvFormatter
            a                       api:XsltFormatter ;
            api:name                "csv" ;
            api:mimeType            "text/csv;charset=UTF-8" ;
            elda:metadataOptions    "bindings,versions,execution,formats"; # elda special
            api:stylesheet          "file:///var/www/ch/html/lda-assets/xslt/csv.xsl"
            .

#
# API ENDPOINTS
#

#
# Vocabulary Endpoints
#

spec:api    api:endpoint spec:scheme .    
spec:scheme
  a api:ListEndpoint ;
  rdfs:comment "Returns a paged list of vocabulary terms from a given vocabulary."@en;
  api:uriTemplate "/{collection}/def/{scheme}" ;
  api:exampleRequestPath  "/company-profile/def/sic-2007/71";
  api:variable [ api:name "schemeRegx"; api:value "^{base}/def/{scheme}/" ];
  api:selector spec:scheme-selector;
  api:viewer spec:definitionViewer, api:describeViewer, api:basicViewer;
  api:defaultViewer spec:definitionViewer;
  .
  
spec:scheme-selector
    api:where 
 """      {?item a owl:Ontology} 
    UNION {?item a rdf:Property} 
    UNION {?item a owl:ObjectProperty} 
    UNION {?item a owl:DatatypeProperty} 
    UNION {?item a rdfs:Class} 
    UNION {?item a rdfs:Datatype } 
    UNION {?item a owl:Class} 
    UNION {?item a owl:Restriction} 
    UNION {?item a owl:DatatypeProperty} 
    UNION {?item a owl:ObjectProperty} 
    UNION {?item a skos:Concept} 
    UNION {?item a skos:ConceptScheme}
    FILTER (regex(STR(?item),?schemeRegx))
 """;
    api:orderBy "str(?item)";
    .

spec:api    api:endpoint spec:scheme-ns .    
spec:scheme-ns
  a api:ItemEndpoint ;
  rdfs:comment "Returns information about a particular vocabulary."@en;
  api:uriTemplate "/{collection}/def/{scheme}/" ;
  api:exampleRequestPath  "/company-profile/def/sic-2007/";
  api:itemTemplate "{base}/{collection}/def/{scheme}/" ;
  api:viewer spec:schemeViewer, api:describeViewer, api:basicViewer;
  api:defaultViewer spec:schemeViewer;
  .

spec:api    api:endpoint spec:scheme-def .    
spec:scheme-def
  a api:ListEndpoint;
  rdfs:comment "Returns a list of vocabularies organised under http://business.data.gov.uk/company-profile/def/"@en;
  api:exampleRequestPath  "/company-profile/def";
  api:viewer    api:describeViewer, spec:schemeViewer, api:basicViewer;
  api:variable  [api:name "regex" ; api:value "^{base}/{_collection}/def/" ] ;
  api:uriTemplate   "/def";
  api:selector [
    api:where   "{ ?item a owl:Ontology } FILTER (regex(STR(?item),?regex))";
  ];
  api:viewer      spec:noneViewer ;
  api:defaultViewer spec:schemeViewer ;
  .
  
spec:schemeViewer
  a api:Viewer ;
  api:name "scheme" ;
  api:properties "*,*.*";
  .

spec:api    api:endpoint spec:definition .    
spec:definition
  a api:ItemEndpoint ;
  rdfs:comment "Returns individual term definitions from a vocabulary"@en;
  api:exampleRequestPath  "/company-profile/def/company-terms/registeredAddress";
  api:uriTemplate "/{collection}/def/{scheme}/{term}" ;
  api:itemTemplate "{base}/{collection}/def/{scheme}/{term}" ;
  api:viewer spec:definitionViewer, api:describeViewer, api:basicViewer;
  api:defaultViewer api:describeViewer ;
  .

spec:definitionViewer
  a api:Viewer ;
  api:name "definition" ;
  api:properties "*,*.*";
  .

spec:subclass-selector
    api:where " ?item rdfs:subClassOf ?superclass . " ;
    api:orderBy "STR(?item)";
    .

spec:api    api:endpoint spec:subclasses .    
spec:subclasses
  a api:ListEndpoint ;
  rdfs:comment "Lists defined subclasses of a given vocabulary (class) term."@en;
  api:uriTemplate "/{collection}/def/{scheme}/{term}/subclass" ;
  api:variable [
    api:name "superclass" ;
    api:value "{base}/{collection}/def/{scheme}/{term}" ;
    api:type rdfs:Resource ;
  ] ;
  api:selector spec:subclass-selector ;
  api:viewer spec:definitionViewer, api:describeViewer, api:basicViewer;
  api:viewer      spec:noneViewer ;
  api:defaultViewer spec:definitionViewer ;
  .

spec:instances-selector
    api:where " ?item a ?class . " ;
#    api:orderBy "STR(?item)";
    .

spec:api    api:endpoint spec:instances .    
spec:instances
  a api:ListEndpoint ;
  rdfs:comment "Lists known instances of a given vocabulary (class) term."@en;
  api:uriTemplate "/{collection}/def/{scheme}/{term}/instance" ;
  api:exampleRequestPath  "/company-profile/def/company-terms/CompanyStatus/instance";
  api:variable [
    api:name "class" ;
    api:value "{base}/def/{scheme}/{term}" ;
    api:type rdfs:Resource ;
  ] ;
  api:selector spec:instances-selector;
  api:viewer spec:definitionViewer, api:describeViewer, api:basicViewer;
  api:viewer      spec:noneViewer ;
  api:defaultViewer api:describeViewer ;
  .

spec:properties-selector
    api:where "{ select ?thing where { ?thing a ?class } limit 1000} ?thing ?item []." ;
    api:orderBy "STR(?item)";
    .

spec:api    api:endpoint spec:properties .    
spec:properties
  a api:ListEndpoint ;
  rdfs:comment "Lists properties used in the dataset to describe instances of a given vocabulary (class) term."@en;
  api:exampleRequestPath  "/company-profile/def/company-terms/registeredAddress/property";
  api:uriTemplate "{collection}/def/{scheme}/{term}/property" ;
  api:variable [
    api:name "class" ;
    api:value "{base}/{collection}/def/{scheme}/{term}" ;
    api:type rdfs:Resource ;
  ] ;
  api:selector spec:properties-selector;
  api:viewer spec:definitionViewer, api:describeViewer, api:basicViewer;
  api:viewer      spec:noneViewer ;
  api:defaultViewer api:describeViewer ;
  .
  

#
# Generic Endpoints
#

spec:api  api:endpoint         spec:thing .
spec:thing
        a                   api:ItemEndpoint;
        api:uriTemplate     "/thing?resource={uri}";
        api:exampleRequestPath
                            "/thing?resource=http://business.data.gov.uk/id/company/08847552";
        rdfs:comment        "A generic endpoint for asking about a specific thing by 'uri'.";
        api:itemTemplate    "{uri}";
        api:viewer          api:basicViewer, api:describeViewer, api:labelledDescribeViewer;
        api:defaultViewer   api:describeViewer;
        .

spec:api  api:endpoint         spec:anything .
spec:anything
    a                   api:ListEndpoint;
    api:name            "anything" ; 
    elda:enableCounting "no";
    rdfs:comment        "A generic listing endpoint for listing things based solely on URI based filter parameters"@en;
    api:exampleRequestPath  "/anything";
    api:uriTemplate     "/anything";
    api:selector [
        api:where   """
          ?item ?p ?o .
          FILTER (!isBlank(?item)) ?item a [] .
        """
    ] ;
    api:viewer          api:describeViewer, 
                        api:basicViewer,
                        api:labelledDescribeViewer;
    api:viewer      spec:noneViewer ;
    api:defaultViewer   api:describeViewer;
    .
    
#
# Company Endpoints
#
 
spec:api api:endpoint spec:company .
spec:company
    a                   api:ItemEndpoint ;
    api:uriTemplate     "/doc/company/{id}" ;
    api:exampleRequestPath
                        "/doc/company/08847552" ;
    rdfs:comment        "An item endpoint for companies." ;
    api:itemTemplate    "http://business.data.gov.uk/id/company/{id}" ;
    api:viewer          api:basicViewer ,
                        api:describeViewer ,
                        api:labelledDescribeViewer ,
                        spec:companyViewer ;
    api:defaultViewer   spec:companyViewer ;
    .
    
spec:api api:endpoint spec:companies .
spec:companies
    a                      api:ListEndpoint ;
    api:uriTemplate        "/doc/company" ;
    api:exampleRequestPath "/doc/company" ;
    rdfs:comment           "A list endpoint for companies." ;
    api:selector [
        api:where   """
          ?item a rov:RegisteredOrganization ;
        """
    ] ;
    api:viewer             api:basicViewer ,
                           api:describeViewer ,
                           api:labelledDescribeViewer ,
                           spec:companyViewer ;
    api:defaultViewer      spec:companyViewer ;
    .
    
spec:companyViewer
    a                 api:Viewer ;
    api:name          "normal" ;
    api:properties    "orgIdentifier, notation, prefLabel, legalName, previousName.companyName, previousName.conDate, incorporationDate, orgActivity.prefLabel, orgStatus.prefLabel, orgType.prefLabel, registration.issued, registration.notation, registration.schemaAgency, registeredAddress.country, registeredAddress.extended-address, registeredAddress.locality, registeredAddress.street-address, registeredAddress.postcode.label, accountsSchedule.accountRefDayOfMonth, accountsSchedule.accountRefMonth, accountsSchedule.nextDueDate, returnsSchedule.lastMadeUpDate, returnsSchedule.nextDueDate, orgStatus.label, orgType.label, registration.label, mortgages.numMortgageCharges, mortgages.numMortgagesOutstanding, mortgages.numMortgagesPartSatisfied, mortgages.numMortgagesSatisfied, countryOfOrigin"
    .
    
spec:api api:endpoint spec:address .
spec:address
    a                      api:ItemEndpoint ;
    api:uriTemplate        "/company-profile/company/{id}/registered-address" ;
    api:exampleRequestPath "/company-profile/company/08847552/registered-address" ;
    rdfs:comment           "An item endpoint for addresses." ;
    api:itemTemplate       "http://business.data.gov.uk/company-profile/company/{id}/registered-address" ;
    api:viewer             api:basicViewer ,
                           api:describeViewer ,
                           api:labelledDescribeViewer,
                           spec:addressViewer ;
    api:defaultViewer      spec:addressViewer ;
    .
    
spec:addressViewer
    a                      api:Viewer ;
    api:name               "normal" ;
    api:properties         "type, country, extended-address, locality, street-address, postcode.label, registeredCompany.prefLabel" ;
    .
    
spec:api api:endpoint spec:accountsSchedule .
spec:accountsSchedule
    a                      api:ItemEndpoint ;
    api:uriTemplate        "/company-profile/company/{id}/accounts-schedule" ;
    api:exampleRequestPath "/company-profile/company/08847552/accounts-schedule" ;
    rdfs:comment           "An item endpoint for accounts schedules." ;
    api:itemTemplate       "http://business.data.gov.uk/company-profile/company/{id}/accounts-schedule" ;
    api:viewer             api:basicViewer ,
                           api:describeViewer ,
                           api:labelledDescribeViewer,
                           spec:accountsScheduleViewer ;
    api:defaultViewer      spec:accountsScheduleViewer ;
    .
    
spec:accountsScheduleViewer
    a                      api:Viewer ;
    api:name               "normal" ;
    api:properties         "type, accountRefDayOfMonth, accountRefMonth, nextDueDate, registeredCompany.prefLabel" ;
    .
    
spec:api api:endpoint spec:registration .
spec:registration
    a                      api:ItemEndpoint ;
    api:uriTemplate        "/company-profile/company/{id}/registration" ;
    api:exampleRequestPath "/company-profile/company/08847552/registration" ;
    rdfs:comment           "An item endpoint for registrations." ;
    api:itemTemplate       "http://business.data.gov.uk/company-profile/company/{id}/registration" ;
    api:viewer             api:basicViewer ,
                           api:describeViewer ,
                           api:labelledDescribeViewer,
                           spec:registrationViewer ;
    api:defaultViewer      spec:registrationViewer ;
    .
    
spec:registrationViewer
    a                      api:Viewer ;
    api:name               "normal" ;
    api:properties         "type, issued, notation, schemaAgency" ;
    .    
    
spec:api api:endpoint spec:returnsSchedule .
spec:returnsSchedule
    a                      api:ItemEndpoint ;
    api:uriTemplate        "/company-profile/company/{id}/returns-schedule" ;
    api:exampleRequestPath "/company-profile/company/08847552/returns-schedule" ;
    rdfs:comment           "An item endpoint for returns schedules." ;
    api:itemTemplate       "http://business.data.gov.uk/company-profile/company/{id}/returns-schedule" ;
    api:viewer             api:basicViewer ,
                           api:describeViewer ,
                           api:labelledDescribeViewer,
                           spec:returnsScheduleViewer ;
    api:defaultViewer      spec:returnsScheduleViewer ;
    .
    
spec:returnsScheduleViewer
    a                      api:Viewer ;
    api:name               "normal" ;
    api:properties         "type, lastMadeUpDate, nextDueDate, registeredCompany.prefLabel" ;
    .

spec:api api:endpoint spec:mortgages .
spec:mortgages
    a                      api:ItemEndpoint ;
    api:uriTemplate        "/company-profile/company/{id}/mortgages" ;
    api:exampleRequestPath "/company-profile/company/08847552/mortgages" ;
    rdfs:comment           "An item endpoint for mortgages information." ;
    api:itemTemplate       "http://business.data.gov.uk/company-profile/company/{id}/mortgages" ;
    api:viewer             api:basicViewer ,
                           api:describeViewer ,
                           api:labelledDescribeViewer,
                           spec:mortgagesViewer ;
    api:defaultViewer      spec:mortgagesViewer ;
    .
    
spec:mortgagesViewer
    a                      api:Viewer ;
    api:name               "normal" ;
    api:properties         "type, numMortgageCharges, numMortgagesOutstanding, numMortgagesPartSatisfied, numMortgagesSatisfied, registeredCompany.prefLabel" ;
    .

spec:api api:endpoint spec:previousName .
spec:previousName
    a                      api:ItemEndpoint ;
    api:uriTemplate        "/company-profile/company/{id}/previous-name/{nameId}" ;
    api:exampleRequestPath "/company-profile/company/SC200886/previous-name/2002-01-07" ;
    rdfs:comment           "An item endpoint for previous name data." ;
    api:itemTemplate       "http://business.data.gov.uk/company-profile/company/{id}/previous-name/{nameId}" ;
    api:viewer             api:basicViewer ,
                           api:describeViewer ,
                           api:labelledDescribeViewer,
                           spec:previousNameViewer ;
    api:defaultViewer      spec:previousNameViewer ;
    .

spec:api api:endpoint spec:previousNames .
spec:previousNames
    a                      api:ListEndpoint ;
    api:uriTemplate        "/company-profile/company/{id}/previous-name" ;
    api:exampleRequestPath "/company-profile/company/SC200886/previous-name" ;
    rdfs:comment           "An list endpoint for the previous names of company." ; 
    api:variable           [ api:name "company" ; api:value <http://business.data.gov.uk/id/company/{id}> ] ; 
    api:selector [
        api:where   """
          ?item ch-terms:registeredCompany ?company ;
                a                          ch-terms:PreviousName ;
        """
    ] ;
    api:viewer             api:basicViewer ,
                           api:describeViewer ,
                           api:labelledDescribeViewer,
                           spec:previousNameViewer ;
    api:defaultViewer      spec:previousNameViewer ;
    .
    
spec:previousNameViewer
    a                      api:Viewer ;
    api:name               "normal" ;
    api:properties         "type, companyName, conDate, registeredCompany.prefLabel" ;
    .
    
    
#
# VOCABULARY
#

#
# ch-terms
#

ch-terms:accountRefDayOfMonth
    a owl:DatatypeProperty
  ; api:label "accountRefDayOfMonth"
  .

ch-terms:accountRefMonth
    a owl:DatatypeProperty
  ; api:label "accountRefMonth"
  .
  
ch-terms:companyName
    a owl:DatatypeProperty
  ; api:label "companyName"
  .
  
ch-terms:conDate
    a owl:DatatypeProperty
  ; api:label "conDate"
  .
  
ch-terms:accountsSchedule
    a owl:ObjectProperty
  ; api:label "accountsSchedule"
  .
  
ch-terms:countryOfOrigin
    a owl:ObjectProperty
  ; api:label "countryOfOrigin"
  .
  
ch-terms:incorporationDate
    a owl:DatatypeProperty
  ; api:label "incorporationDate"
  .
  
ch-terms:lastMadeUpDate
    a owl:DatatypeProperty
  ; api:label "lastMadeUpDate"
  .
  
ch-terms:mortgages
    a owl:DatatypeProperty
  ; api:label "mortgages"
  .
  
ch-terms:nextDueDate
    a owl:DatatypeProperty
  ; api:label "nextDueDate"
  .
  
ch-terms:numMortgageCharges
    a owl:DatatypeProperty
  ; api:label "numMortgageCharges"
  .
  
ch-terms:numMortgagesPartSatisfied
    a owl:DatatypeProperty
  ; api:label "numMortgagesPartSatisfied"
  .
  
ch-terms:numMortgagesOutstanding
    a owl:DatatypeProperty
  ; api:label "numMortgagesOutstanding"
  .
  
ch-terms:numMortgagesSatisfied
    a owl:DatatypeProperty
  ; api:label "numMortgagesSatisfied"
  .
  
ch-terms:previousName
    a owl:ObjectProperty
  ; api:label "previousName"
  .
  
ch-terms:returnsSchedule
    a owl:ObjectProperty
  ; api:label "returnsSchedule"
  . 

ch-terms:registeredAddress
    a owl:ObjectProperty
  ;  api:label "registredAddress"
  .
  
ch-terms:registeredCompany
    a owl:ObjectProperty
  ;  api:label "registredCompany"
  .
  
#
# adms
#

adms:schemaAgency
    a owl:DatatypeProperty
  ; api:label "schemaAgency"
  .
  
#
# org
#

org:identifier
    a owl:DatatypeProperty
  ; api:label "orgIdentifier"
  .
 
#
# rov
#

rov:legalName
    a rdf:Property
  ; api:label "legalName"
  .
  
rov:orgActivity
    a owl:ObjectProperty
  ; api:label "orgActivity"
  .
  
rov:orgStatus
    a owl:ObjectProperty
  ; api:label "orgStatus"
  .
  
rov:orgType
    a owl:ObjectProperty
  ; api:label "orgType"
  .
  
rov:registration
    a owl:ObjectProperty
  ; api:label "registration"
  .
  
#
# Ordnance Survey postcode
#

postcode:postcode
    a owl:ObjectProperty
  ; api:label "postcode"
  .
  
#
# vcard
#


vcard:country
    a owl:DatatypeProperty
  ; api:label "country"
  .
  
vcard:extended-address
    a owl:DatatypeProperty
  ; api:label "extended-address"
  .
  
vcard:locality
    a owl:DatatypeProperty
  ; api:label "locality"
  .
  
vcard:organization-name
    a owl:DatatypeProperty
  ; api:label "organization-name"
  .
  
vcard:street-address
    a owl:DatatypeProperty
  ; api:label "street-address"
  .

#
# skos
# 

skos:notation
    a rdfs:Property
  ; api:label "notation"
  .
  
skos:prefLabel
    a rdfs:Property
  ; api:label "prefLabel"
  .
  
#
# dcterms
#

dct:issued
    a owl:DatatypeProperty
  ; api:label "issued"
  .
    
#
# dc
#

dc:creator
      a owl:DatatypeProperty ;
      #rdfs:range xsd:string ;
      api:label "creator" .

dc:date
      a owl:DatatypeProperty ;
      rdfs:range xsd:date ;
      api:label "dc_date" .

dc:description
      a owl:DatatypeProperty ;
      #rdfs:range xsd:string ;
      api:label "description" .

dc:identifier
      a owl:DatatypeProperty ;
      #rdfs:range xsd:string ;
      api:label "identifier" .

dc:publisher
      a owl:DatatypeProperty ;
      #rdfs:range xsd:string ;
      api:label "publisher" .

dc:subject
      a owl:DatatypeProperty ;
      #rdfs:range xsd:string ;
      api:label "subject" .

dc:title
      a owl:DatatypeProperty ;
      #rdfs:range xsd:string ;
      api:label "title" .
      
#
# owl
#

owl:imports
    rdfs:range      rdfs:Resource;
    api:label       "imports";
    .

owl:cardinality
    rdfs:range  xsd:integer;
    api:label   "cardinality";
    .

owl:maxCardinality
    rdfs:range  xsd:integer;
    api:label   "maxCardinality";
    .

owl:minCardinality
    rdfs:range  xsd:integer;
    api:label   "minCardinality";
    .

owl:versionInfo
    api:label   "versionInfo";
    .

owl:Class  a       rdfs:Class ;
        api:label  "owl_Class" .

      
#
# rdf(s)
#

rdfs:comment
        api:label  "comment" ;
        api:structured  true .

rdfs:range  rdfs:range  rdfs:Resource ;
        api:label   "range" .

rdf:type
  rdfs:range     rdfs:Class;
  api:label      "type" .
  
rdf:first
  rdfs:range     rdf:List;
# avoid conflicting use of "first" short name.
  api:label     "rdf_first" .

rdf:rest
  rdfs:range     rdf:List;
  api:label     "rest" .

rdf:value
  api:structured        true;
  api:label "value" .

rdf:type  rdfs:range     rdfs:Resource ;
        api:label        "type" ;
        api:multiValued  true ;
        .

rdfs:label  api:label    "label" ;
        a   rdf:Property ;
        api:multiValued  true ;
        api:structured   true .

owl:sameAs  rdfs:range   rdfs:Resource ;
        api:label        "sameAs" ;
        api:multiValued  true ;
        .
        
rdfs:domain
      rdfs:range rdfs:Class ;
      api:label "domain" .

rdfs:range  rdfs:range  rdfs:Resource ;
        api:label   "range" .

rdfs:seeAlso
      rdfs:range rdfs:Resource ;
      api:label "seeAlso" .

rdfs:isDefinedBy
      rdfs:range rdfs:Resource ;
      api:label "isDefinedBy" .

rdfs:subPropertyOf
      rdfs:range rdfs:Resource ;
      api:label "subPropertyOf" .

rdfs:subClassOf  
        rdfs:range  rdfs:Resource ;
        api:label   "subClassOf" .

rdfs:Class  a      rdfs:Class ;
        api:label  "rdfs_Class" .

#
# XSD datatypes
#
xsd:gYear
    api:label   "gYear" ;
    a           rdfs:Datatype .

xsd:gYearMonth
    api:label   "gYearMonth" ;
    a           rdfs:Datatype .
    
xsd:dateTime
    api:label   "dateTime" ;
    a           rdfs:Datatype .

xsd:date
    api:label   "date" ;
    a           rdfs:Datatype .

xsd:integer
    a           rdfs:Datatype ;
    api:label  "integer" .
    
xsd:float  a       rdfs:Datatype ;
        api:label  "float" .

xsd:decimal  a     rdfs:Datatype ;
        api:label  "decimal" .